#
# Rutina para generar archivo setenv.mk
#

$(info )
$(info Ejecutando config/gensetenv.mk )

ifeq ($(HB_MAKE_PLAT),win)
ifeq ($(notdir $(wildcard $(subst \,/,$(TGTK_DIR)/setenv.mk))),)


N:=\#
INI:=> $(TGTK_DIR)\setenv.mk 
ADD:=>> $(TGTK_DIR)\setenv.mk 

$(shell echo $(N)--------------------------------------------- $(INI))
$(shell echo $(N) System Configure of T-Gtk.                   $(ADD))
$(shell echo $(N) (c)2004-11 gTXBASE Team.                     $(ADD))
$(shell echo $(N)                                              $(ADD))
$(shell echo $(N)--------------------------------------------- $(ADD))
$(shell echo. $(ADD))
$(shell echo $(N)-------------------- $(ADD))
$(shell echo $(N) Compilador xBase. Opciones (HARBOUR|XHARBOUR) $(ADD))
$(shell echo export XBASE_COMPILER =$(XBASE_COMPILER) $(ADD))
$(shell echo. $(ADD))
$(shell echo $(N)-------------------- $(ADD))
$(shell echo $(N) RUTAS T-GTK. $(ADD))
$(shell echo export TGTK_DIR =$(TGTK_DIR) $(ADD))
$(shell echo export LIBDIR_TGTK =$(LIBDIR_TGTK) $(ADD))
$(shell echo export INCLUDE_TGTK_PRG =$(INCLUDE_TGTK_PRG) $(ADD))
$(shell echo. $(ADD))
$(shell echo $(N)-------------------- $(ADD))
$(shell echo $(N) Componentes Adicionales. $(ADD))
$(shell echo export GTK_PATH =$(GTK_PATH) $(ADD))
$(shell echo export PKG_CONFIG_PATH =$(PKG_CONFIG_PATH) $(ADD))
$(shell echo. $(ADD))
$(shell echo $(N) Soporte de Impresion. $(ADD))
ifeq ($(HB_MAKE_PLAT),win)
$(shell echo export SUPPORT_PRINT_WIN32 =$(SUPPORT_PRINT_WIN32) $(ADD))
else
$(shell echo export SUPPORT_PRINT_LINUX =$(SUPPORT_PRINT_LINUX) $(ADD))
endif
$(shell echo. $(ADD))
$(shell echo $(N) Soporte para GTKSourceView. $(ADD))
$(shell echo export GTKSOURCEVIEW =$(GTKSOURCEVIEW) $(ADD))
$(shell echo. $(ADD))
$(shell echo $(N) Soporte para Bonobo. $(ADD))
$(shell echo export BONOBO =$(BONOBO) $(ADD))
$(shell echo. $(ADD))
$(shell echo $(N) Soporte para gnomeDB y LibGDA. $(ADD))
$(shell echo export GNOMEDB =$(GNOMEDN) $(ADD))
$(shell echo. $(ADD))
$(shell echo $(N) Soporte para cURL. $(ADD))
$(shell echo export CURL =$(CURL) $(ADD))
$(shell echo. $(ADD))
ifneq ($(HB_MAKE_PLAT),win)
$(shell echo $(N) Soporte para WebKit. $(ADD))
$(shell echo export WEBKIT =$(WEBKIT) $(ADD))
$(shell echo. $(ADD))
endif
$(shell echo $(N) Soporte para SQLite. $(ADD))
$(shell echo export SQLITE =$(SQLITE) $(ADD))
$(shell echo. $(ADD))
$(shell echo $(N) Soporte para MySQL. $(ADD))
$(shell echo export MYSQL =$(MYSQL) $(ADD))
$(shell echo export DOLPHIN =$(DOLPHIN) $(ADD))
$(shell echo export MYSQL_VERSION =$(MYSQL_VERSION) $(ADD))
$(shell echo export MYSQL_PATH =$(MYSQL_PATH) $(ADD))
$(shell echo. $(ADD))
$(shell echo $(N) Soporte para PostgreSQL. $(ADD))
$(shell echo export POSTGRE =$(POSTGRE) $(ADD))
$(shell echo export POSTGRE_VERSION =$(POSTGRE_VERSION) $(ADD))
$(shell echo export POSTGRE_PATH =$(POSTGRE_PATH) $(ADD))
$(shell echo. $(ADD))
$(shell echo. $(ADD))
$(shell echo $(N) Flags para el Compilador xBase. $(ADD))
$(shell echo $(N) Solo para definir una cadena fija como flag (HB_FLAGS). $(ADD))
$(shell echo $(N)export HB_FLAGS $(ADD))
$(shell echo. $(ADD))
$(shell echo $(N) -l $(ADD))
$(shell echo export HB_LINES :=$(HB_LINES) $(ADD))
$(shell echo $(N) -gh $(ADD))
$(shell echo export HB_HRB_OUT :=$(HB_HRB_OUT) $(ADD))
$(shell echo $(N) -d<id>[=<val>] $(ADD))
$(shell echo export HB_DEFINE :=$(HB_DEFINE) $(ADD))
$(shell echo $(N) -v $(ADD))
$(shell echo export HB_ASSUME_VARS :=$(HB_ASSUME_VARS) $(ADD))
$(shell echo $(N) -p $(ADD))
$(shell echo export HB_GEN_PPO :=$(HB_GEN_PPO) $(ADD))
$(shell echo $(N) -p+ $(ADD))
$(shell echo export HB_GEN_PPT :=$(HB_GEN_PPT) $(ADD))
$(shell echo $(N) -b $(ADD))
$(shell echo export HB_DEBUG_INFO :=$(HB_DEBUG_INFO) $(ADD))
$(shell echo $(N) -w[level] Warning Level [1..3]$(ADD))
$(shell echo export HB_WL :=$(HB_WL) $(ADD))
$(shell echo $(N) -q[,0,2] $(ADD))
$(shell echo export HB_QUIET :=$(HB_QUIET) $(ADD))
$(shell echo. $(ADD))
$(shell echo. $(ADD))


endif
endif
#/eof
